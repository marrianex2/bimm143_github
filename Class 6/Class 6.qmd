---
title: "Class 6: R Functions"
author: "Marriane Allahwerdi (A16902759)"
format: pdf
---

Today we are going to explore R functions and begin to thik about writing our own functions. 

Let's start simple and write our first function to add some numbers. 

Every function in F has at least 3 things:

-a **name**, we pick this 
-one or more input **arguments**, 
-the **body**, wheere the work gets done

```{r}
add <- function (x, y=1, z=0) {
   x+y 
}
```

Now lets try it out 

```{r}
add (c(10,1,1,10), y=1) 
     
```

```{r}
add(10)
add(10,10)
add(10,10,10)
```

```{r}
mean( c(10,10,NA), na.rm=T)
```

# Lab Sheet Work 
> Q1. Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format:“https://tinyurl.com/gradeinput”

# Example input vectors to start 
```{r}
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

Begin by calculating the average for student1
```{r}
student1
mean(student1) 
```
```{r}
student2
mean(student2, na.rm=T)
```

```{r}
student3
mean(student3, na.rm=T)
```

We also want to drop the lowest score from a given student's set of scores. 

```{r}
student1[-8]
```

We can try the `min()` functions to find the lowest score.
```{r}
min(student1)
```

I want to find the location of the min value not the value itself, for this I can use `which.min()`
```{r}
student1
which.min(student1)
```

Let's put these two things together:
```{r}
which.min(student1)
student1[-8]
mean(student1[-8])
```

```{r}
mean(student1[-which.min(student1)])
```

```{r}
min.ind <- which.min(student1)
mean(student1[-min.ind])
```

What about student2
```{r}
mean(student2[-which.min(student2)], na.rm=T)
```

```{r}
x<- student2
x[2] <-0
x
```

```{r}
x <- student2
x[is.na(x)]
```

```{r}
c(T,T,F,T)
!c(T,T,F,T)
```

```{r}
x[is.na(x)] = 0
x
```
 So far we have a working snippet: 
 
```{r}
x <- student2
## find NAs in 'x' and make them 0 
x[is.na(x)] <- 0

## finds the min and rm's it before getting mean 
mean(x[-which.min(x)])
```

Now turn it into a function
```{r}
grade <- function(x) {
 # Find NA's in 'x' and make them 0 
  x[is.na(x)] <- 0

 # drop lowest and find mean 
  mean(x[-which.min(x)])
}
```

```{r}
grade(student1)
grade(student2)
grade(student3)
```

Now `apply()`to our gradebook 
```{r}
gradebook <- read.csv("https://tinyurl.com/gradeinput", row.names=1 )
gradebook

```

To use the `apply()` function on this `gradebook` data set I need to decide whether I want to "apply" to the `grade()` function over the rows or columns of the `gradebook()`

```{r}
ans <- apply(gradebook, 1, grade)
which.max(ans)
ans[which.max(ans)]
``` 
> Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook?

The top scoring student is student 18 with % 94.50.

```{r}
apply(gradebook, 2, mean, na.rm=T)
```

Without the lowest drop: 

```{r}
masked_gradebook <-gradebook
masked_gradebook[ is.na(masked_gradebook)] = 0
apply(masked_gradebook, 2, mean)
```

I could modify the `grade()` function to do this too - i.e. not drop the lowest options

```{r}
grade2 <- function(x, drop.low=T) {
  
    # Find NA's in 'x' and make them 0 
    x[ is.na(x)] <- 0
    
    if(drop.low) {
      cat("Hello low")
  # Drop lowest value and find mean 
  out <- mean( x[-which.min(x)])
  } else {
  out <- mean(x)
  cat("No low")
  }
  return(out)
}
  
```
```{r}
grade2(student1,FALSE)
```

> Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall?)

The homework that obtained the lowest average score is hw2.


The function to calculate correlations in R is called `cor()`

```{r}
x <- c(100, 90, 80, 100)
y <- c(100, 90, 80, 100)
z <- c(80, 90, 100, 10)
cor(x,y,)
cor(x,z)
```

```{r}
cor(ans, gradebook$hw1) 
```

```{r}
cor(ans, masked_gradebook$hw5)
```

I want to `apply()` the `cor()` function over the `masked_gradebook()` and use the `ans` scores for the class 
```{r}
apply(masked_gradebook, 2, cor, y=ans)
```

> Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)?

Hw5 had the greatest predictive correlation value with 0.6. 


> Q5. Make sure you save your Quarto document and can click the “Render” (or Rmarkdown”Knit”) button to generate a PDF foramt report without errors. Finally, submit your PDF to gradescope. 


